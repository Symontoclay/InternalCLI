using CommonUtils;
using CommonUtils.DebugHelpers;
using CommonUtils.DeploymentTasks;
using Newtonsoft.Json;
using NLog;
using SiteBuilder.SiteData;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Deployment.Tasks.BuildChangeLog
{
    public class BuildChangeLogTask : BaseDeploymentTask
    {
        public BuildChangeLogTask(BuildChangeLogTaskOptions options)
            : this(options, null)
        {
        }

        public BuildChangeLogTask(BuildChangeLogTaskOptions options, IDeploymentTask parentTask)
            : base(MD5Helper.GetHash(options.TargetChangeLogFileName), false, options, parentTask)
        {
            _options = options;
        }

        private readonly BuildChangeLogTaskOptions _options;

        /// <inheritdoc/>
        protected override void OnValidateOptions()
        {
            ValidateOptionsAsNonNull(_options);
            ValidateDirectory(nameof(_options.TargetChangeLogFileName), _options.TargetChangeLogFileName);
            ValidateFileName(nameof(_options.ReleaseNotesFilePath), _options.ReleaseNotesFilePath);
        }

        /// <inheritdoc/>
        protected override void OnRun()
        {
            var releaseNotesList = ReadReleaseItems().OrderByDescending(p => p.Date).ToList();

            var sb = new StringBuilder();
            sb.AppendLine("**Note:** This file is automatically generated.");

            foreach(var releaseNote in releaseNotesList)
            {
                sb.AppendLine();
                sb.AppendLine($"## {releaseNote.Version} ({releaseNote.Date?.ToString("yyyy-MM-dd")})");
                sb.AppendLine(releaseNote.Description);
            }

            File.WriteAllText(_options.TargetChangeLogFileName, sb.ToString());
        }

        private List<ReleaseItem> ReadReleaseItems()
        {
            return JsonConvert.DeserializeObject<List<ReleaseItem>>(File.ReadAllText(_options.ReleaseNotesFilePath));
        }

        /// <inheritdoc/>
        protected override string PropertiesToString(uint n)
        {
            var spaces = DisplayHelper.Spaces(n);

            var sb = new StringBuilder();

            sb.AppendLine($"{spaces}Build CHANGELOG.md in repository at path '{_options.TargetChangeLogFileName}' by release notes file '{_options.ReleaseNotesFilePath}'.");
            sb.Append(PrintValidation(n));

            return sb.ToString();
        }
    }
}
